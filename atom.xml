<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yh0214.github.io</id>
    <title>yanghang</title>
    <updated>2019-11-07T01:44:27.883Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yh0214.github.io"/>
    <link rel="self" href="https://yh0214.github.io/atom.xml"/>
    <logo>https://yh0214.github.io/images/avatar.png</logo>
    <icon>https://yh0214.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, yanghang</rights>
    <entry>
        <title type="html"><![CDATA[单元测试框架]]></title>
        <id>https://yh0214.github.io/post/dan-yuan-ce-shi-kuang-jia</id>
        <link href="https://yh0214.github.io/post/dan-yuan-ce-shi-kuang-jia">
        </link>
        <updated>2019-11-06T06:07:39.000Z</updated>
        <content type="html"><![CDATA[<p>测试是判断预期结果和实际结果是否一致，类似于条件判断<br>
断言 assert</p>
<pre><code>def add(a, b):
    return a + b

expcted = 7
actual = add(3, 4)
assert actual == expcted
</code></pre>
<p>单元测试框架 同样可以使用在接口测试、ui测试<br>
unittest python自带的一个单元测试框架</p>
<pre><code>import unittest
def add(a, b):
    return a + b
x = 3
y = 5
expected = 8
class TestAdd(unittest.TestCase):

    def test_add_success(self):
        # 测试用例方法
        # 要准备 预期结果和世界结果
        self.assertTrue(expected == add(x, y))

    def test_add_error(self):
        self.assertEqual(7, add(x, y))
</code></pre>
<pre><code>import unittest


def add(a, b):
    return a + b


x = 3
y = 5
expected = 8


class TestAdd(unittest.TestCase):  # 类名最好是Test开头
    # 测试用例的设计 前置条件 后置条件
    @classmethod
    def setUpClass(cls):
        print('测试类之前')

    @classmethod
    def tearDownClass(cls):
        print('测试类之后')

    def setUp(self):
        '''前置条件'''
        # 每个测试用例方法之前自动运行setUp里面的程序
        self.data = [
            {'a': 3, 'b': 4, 'expected': 7},
            {'a': 5, 'b': 9, 'expected': 8}
        ]
        print('用例执行前置条件')

    def tearDown(self):
        '''后置条件'''
        # 每个测试用例方法之后自动执行tearDown里面的程序
        print('用例执行后置条件')

    def test_add_success(self):  # 测试用例方法一定要test_开头
        # 断言方式有很多
        self.assertTrue(self.data[0]['expected'] == add(self.data[0]['a'], self.data[0]['b']))
        # self.assertGreater()

    def test_add_error(self):
        self.assertEqual(self.data[1]['expected'], add(self.data[1]['a'], self.data[1]['b']))


if __name__ == '__main__':
    unittest.main()
</code></pre>
<p>F表示测试用例不通过 .表示测试用例通过<br>
运行使用unittest框架代码的两种方式 1、pycharm中右键选择Run 'Unittests in ...' 2、添加上代码unitest.main()后，使用python ...运行<br>
可以根据python -m unittest 模块名.测试类名.测试方法运行指定的测试用例方法<br>
unittest 用例执行顺序是用例方法名根据ASCII编码顺序执行</p>
<pre><code>import unittest


def minus(a, b):
    return a - b


x = 3
y = 5

expected = -2


class TestMinus(unittest.TestCase):  # 类名最好是Test开头

    def test_minus_success(self):  # 测试用例方法一定要test_开头
        # 断言方式有很多
        self.assertTrue(expected == minus(x, y))

    def test_minus_error(self):
        self.assertEqual(7, minus(x, y))


if __name__ == '__main__':
    unittest.main()
</code></pre>
<pre><code># 初始化一个对象 suite 测试套件（集合）
import unittest

# 初始化测试套件
from class_14_单元测试.test_add import TestAdd
from class_14_单元测试.test_minus import TestMinus

from class_14_单元测试 import test_add
from class_14_单元测试 import test_minus

suite = unittest.TestSuite()
# 往套件里面添加测试用例

cases = [TestAdd('test_add_success'),
         TestAdd('test_add_error'),
         TestMinus('test_minus_success'),
         TestMinus('test_minus_error')]
suite.addTests(cases)

# TestLoader 用来加载测试用例的
# 可以根据模块加载，也可以根据测试类加载，也可以自己定义规则加载
# 初始化一个loader
loader = unittest.TestLoader()
# 根据测试类加载测试用例
# cases1 = loader.loadTestsFromTestCase(TestAdd)
# cases2 = loader.loadTestsFromTestCase(TestMinus)
cases1 = loader.loadTestsFromModule(test_add)
cases2 = loader.loadTestsFromModule(test_minus)
suite1 = unittest.TestSuite()
suite1.addTests(cases1)
suite1.addTests(cases2)

# 运行，测试报告文件 demo.txt

with open('demo5.txt', mode='w', encoding='utf-8') as f:
    # 初始化 runner
    runner = unittest.TextTestRunner(f, verbosity=2)
    # 运行
    runner.run(suite1)

</code></pre>
<p>自动发现测试用例</p>
<pre><code>import os
import unittest

# 自动发现测试用例
# suite1 = unittest.TestSuite()
# 初始化 loader
loader = unittest.TestLoader()
# 自动发现测试用例
test_dir = os.path.dirname(os.path.abspath(__file__))
# discover()方法返回的结果就是一个suite，所以就不需要再定义suite了
suite1 = loader.discover(test_dir)
with open('demo6.txt', mode='w', encoding='utf-8') as f:
    runner = unittest.TextTestRunner(f, verbosity=2)
    runner.run(suite1)

</code></pre>
<p>HTMLTestRunner</p>
<pre><code>import os
import unittest
# 导入htmltestrunner
from datetime import datetime
from class_14_单元测试.HTMLTestRunner import HTMLTestRunner


# 下载htmltestrunner  http://tungwaiyip.info/software/HTMLTestRunner.html
# 自动发现测试用例
# suite1 = unittest.TestSuite()
# 初始化 loader
loader = unittest.TestLoader()
# 自动发现测试用例
start_dir = os.path.dirname(os.path.abspath(__file__))
# discover()方法返回的结果就是一个suite，所以就不需要再定义suite了
suite1 = loader.discover(start_dir)


# html文件 模式为二进制写入模式 二进制不需要写encoding
# 测试报告放到report文件夹
# 根据时间动态生成一个文件名
report_dir = os.path.join(start_dir,'report')
if not os.path.exists(report_dir):
    os.mkdir(report_dir)

time_str = datetime.now().strftime('%Y-%m-%d %H-%M-%S')

# report/2019-11-5.html
file_name = os.path.join(report_dir,time_str + '.html')
with open(file_name, mode='wb') as f:
    runner = HTMLTestRunner(f,
                            verbosity=2,
                            title='python的第一份测试报告',
                            description='哈哈哈',
                            tester='yh')
    runner.run(suite1)

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[类的继承]]></title>
        <id>https://yh0214.github.io/post/lei-de-ji-cheng</id>
        <link href="https://yh0214.github.io/post/lei-de-ji-cheng">
        </link>
        <updated>2019-11-06T01:40:17.000Z</updated>
        <content type="html"><![CDATA[<pre><code>class DalaoParent:
    def __init__(self, money):
        self.money = money

    def xiaomubiao(self, money):
        print(f&quot;大佬今年定{money}的小目标&quot;)

    def paiting(self,type):
        print('想做什么就做什么')

class Dalao(DalaoParent):
    # def __init__(self, money):
    #     self.money = money
    def paiting(self, type):
        super().paiting(type)
        print(f'想当{type}派画家')


xixi = Dalao(10000)
print(xixi.money)
xixi.xiaomubiao(20000)
xixi.paiting('野兽')

xx_parent = DalaoParent(30000)
xx_parent.paiting('抽象')
</code></pre>
<pre><code>class Mobile:
    def __init__(self, brand, model, color):
        self.brand = brand
        self.model = model
        self.color = color
        print('Mobile正在初始化')

    def call(self, phone_number):
        print(f'呼叫电话号码{phone_number}')

class IphoneMobile(Mobile):
    brand = '苹果'

    def __init__(self, model, color):
        # self.model = model
        # self.color = color
        # Mobile(self.brand, model, color)
        # super().__init__(self.brand, model, color)
        # Mobile(self.brand, model, color).call('123')
        super().call('123')
        print('Iphone正在初始化')
iphone5 = IphoneMobile('5', '黑色')
</code></pre>
<p>重写 <strong>init__方法被重写了，不会用父类里买的__init</strong><br>
super()的作用 如果想使用父类里面的方法 1、Parent().方法() 2、super().方法()<br>
多重继承</p>
<pre><code>class Mobile:
    def __init__(self, brand, model, color):
        self.brand = brand
        self.model = model
        self.color = color
        print('Mobile正在初始化')

    def call(self, phone_number):
        print(f'呼叫电话号码{phone_number}')

    def say(self, data):
        print(f'普通手机正在说{data}')

class Game:
    def play(self, name):
        print(f'正在玩{name}')

class Voice:
    def say(self, data):
        print(f'手机正在说{data}')

class SmartPhone(Mobile, Voice, Game):
    '''智能手机'''
    # def say(self, data):
    #     print(f'智能手机正在说{data}')


smart_phone = SmartPhone(&quot;苹果&quot;, &quot;8&quot;, &quot;红色&quot;)
smart_phone.call('186')
smart_phone.play('王者荣耀')
smart_phone.say('666')
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[类的方法&变量]]></title>
        <id>https://yh0214.github.io/post/lei-de-fang-fa-andbian-liang</id>
        <link href="https://yh0214.github.io/post/lei-de-fang-fa-andbian-liang">
        </link>
        <updated>2019-10-30T03:07:07.000Z</updated>
        <content type="html"><![CDATA[<pre><code>class Mobile:
    has_logo = True
    has_ram = True

    def __init__(self,model,brand):
        # 把参数转化成实例变量
        self.mobile_model = model
        self.brand = brand

    def capture(self):
        # 实例方法中使用类变量
        print(self.has_logo)
        print(&quot;{}正在照相&quot;.format(self.brand))

    def beautify_cap(self):
        self.capture()
        print(&quot;修照片&quot;)

    @classmethod
    def if_logo(cls):
        # 类方法
        # 类方法很少使用
        print(cls.has_logo)

    @staticmethod
    def check_weather():
        print(&quot;今天天气......&quot;)
</code></pre>
<p>对象的实例化</p>
<pre><code>iphone5 = Mobile('5', '苹果')
</code></pre>
<p>怎么去使用类的变量 类的变量包含类变量和实例变量</p>
<pre><code>print(iphone5.mobile_model)
print(iphone5.brand)
</code></pre>
<p>类外面使用类变量</p>
<pre><code>print(Mobile.has_logo)
print(iphone5.has_logo)
</code></pre>
<p>对象调用实例方法<br>
iphone5.capture()</p>
<p>类变量和实例变量有什么区别？<br>
类变量能同时被类和实例访问，实例变量只能被实例自己访问</p>
<p>实例属性放在__init__中定义，self.相关的属性优先放在__init__中定义</p>
<p>静态方法和这个类以及对象没有关系，但是有关联<br>
静态方法和普通函数相比，好处是方便管理<br>
例子</p>
<pre><code>class InterViewer:

    def __init__(self, name):
        self.name = name

    def offer(self, money, time):
        print(&quot;{} 收了一个大 offer：月薪{},k {}天到岗&quot;.format(self.name, money, time))
        return '拿 offer'

    def eat(self, food):
        print(&quot;{} 最喜欢吃 {}&quot;.format(self.name, food))

    def interviwing(self):
        print(&quot;正在面试&quot;)


cainiao = InterViewer('菜鸟')
print(cainiao.offer(50, 1))
cainiao.interviwing()
</code></pre>
<pre><code>class FileHandler:
    def __init__(self,filename,encoding='utf-8'):
        self.filename = filename
        self.encoding = encoding

    def read_file(self):
        with open(self.filename, mode='r', encoding=self.encoding) as f:
            a = f.read()
        return a

    def write_file(self, data,mode='w'):
        with open(self.filename, mode=mode, encoding=self.encoding) as f:
            f.write(data)


handler = FileHandler('demo.txt')
print(handler.read_file())

handler.write_file('147258369',mode='a')
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[类的创建&调用]]></title>
        <id>https://yh0214.github.io/post/lei-de-chuang-jian-anddiao-yong</id>
        <link href="https://yh0214.github.io/post/lei-de-chuang-jian-anddiao-yong">
        </link>
        <updated>2019-10-30T00:48:14.000Z</updated>
        <content type="html"><![CDATA[<p>类，一群有共同的特征和行为的事物<br>
类名，标识符，大驼峰命名法<br>
类的表示方法</p>
<pre><code>class DaLao:
    pass
</code></pre>
<p>特征又被称为属性，类属性，类成员都具备的共同点。<br>
特征由变量表示，变量写在类下面</p>
<pre><code>class DaLao:
    haird = &quot;low&quot;
    eyed = &quot;class&quot;
    fav_shoes = &quot;tuo shoes&quot;


print(DaLao.haird)
print(DaLao.eyed)
</code></pre>
<p>对象：某个类下面具体的一个个体<br>
在类里面定义的函数称为方法<br>
初始化方法也叫构造函数 只能返回None<br>
初始化对象的时候自动调用__init__方法<br>
实例 = 对象<br>
类变量 = 类属性<br>
实例变量 = 实例属性<br>
实例变量是表示某一个对象拥有的特征</p>
<pre><code>class SingleDog:
    freedom = True
    favor = &quot;吃狗粮&quot;
    sports_hobby = &quot;睡觉&quot;

    def __init__(self,name,favor_game):
        self.name = name
        self.favor_game = favor_game
        print('hello')


single_dog = SingleDog('huhu','abc')
print(single_dog)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[路径处理&文件读写&异常处理]]></title>
        <id>https://yh0214.github.io/post/osandwen-jian-cao-zuo-andyi-chang-chu-li</id>
        <link href="https://yh0214.github.io/post/osandwen-jian-cao-zuo-andyi-chang-chu-li">
        </link>
        <updated>2019-10-29T07:07:46.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>路径处理<pre><code>import os
</code></pre>
</li>
<li>获取当前工作的文件夹路径，此路径是指在哪里运行python文件，此方法不经常使用<pre><code>print(os.getcwd())
</code></pre>
</li>
<li>文件的绝对路径，非常有用</li>
</ul>
<pre><code> print(os.path.abspath(__file__))
</code></pre>
<ul>
<li>
<p>获取文件路径的文件夹路径</p>
<pre><code>dir_name = os.path.dirname(os.path.abspath(__file__))
</code></pre>
</li>
<li>
<p>路径拼接</p>
<pre><code>new_dir = os.path.join(dir_name,'data')
</code></pre>
</li>
<li>
<p>创建文件夹，使用该方法创建要一层一层创建，否则会报错</p>
<pre><code>os.mkdir(new_dir)
</code></pre>
</li>
<li>
<p>首先判断文件夹是否存在，存在则再去创建</p>
<pre><code>new_dir = os.path.join(dir_name,'data','cases')
new_dir_data = os.path.dirname(new_dir)
if os.path.exists(new_dir_data):
    os.mkdir(new_dir)
else:
    print('data文件夹不存在')
</code></pre>
</li>
<li>
<p>判断是否是一个文件夹，返回True或者False</p>
<pre><code>print(os.path.isdir(new_dir))
</code></pre>
</li>
<li>
<p>判断是否是一个文件，返回True或者False</p>
<pre><code>print(os.path.isfile(new_dir))
</code></pre>
</li>
<li>
<p>打开文件 文件内容有汉字时使用utf-8打开</p>
<pre><code>f = open('demo.txt',encoding='utf-8')
</code></pre>
</li>
<li>
<p>读文件</p>
<pre><code>print(f.read())
</code></pre>
</li>
<li>
<p>一行一行读取文件</p>
<pre><code>f = open('demo.txt',encoding='utf-8')
print(f.readlines())
</code></pre>
</li>
<li>
<p>写文件 mode为'w'，如果文件已经存在，写入内容的时候，原来的文件内容会被覆盖</p>
</li>
<li>
<p>如果不想被覆盖，mode应该使用'a'</p>
</li>
<li>
<p>mode为'x'，创作模式，文件已经存在时使用x模式会报错</p>
<pre><code>f = open('demo.txt',mode='w',encoding='utf-8')
f.write('呼呼，哈哈')
</code></pre>
</li>
<li>
<p>关闭文件，当打开文件执行了操作后，一定要记得关闭</p>
<pre><code>f.close()
</code></pre>
</li>
<li>
<p>防止忘记关闭文件</p>
<pre><code>with open('demo.txt',mode='r',encoding='utf-8') as f:
  print(f.read())
</code></pre>
</li>
<li>
<p>异常处理<br>
try:<br>
执行代码<br>
except 错误类型1：<br>
pass<br>
except 错误类型2：<br>
pass<br>
except (错误类型3,错误类型4):<br>
pass</p>
</li>
</ul>
<pre><code>try:
    1/0
    mylist = [1, 2, 3, 4, 5, 6]
    mylist[100]
except IndexError:
    print('wrong2')
except ZeroDivisionError:
    print('wrong')
</code></pre>
<ul>
<li>try：遇到错误代码就会终止分支，只会执行except ZeroDivisionError分支</li>
<li>异常处理写except Exception，不写具体错误类型，会不好定位问题<br>
为什么进行异常处理？<br>
为了让程序按我们的想法执行。<br>
手动抛出异常 raise</li>
</ul>
<pre><code>class MyError(Exception):
    pass


try:
    mylist = [1, 2, 3]
    mylist[4]
    1 / 0
except (ZeroDivisionError, IndexError) as e:
    raise MyError
</code></pre>
<p>finally</p>
<pre><code>try:
    mylist = [1, 2, 3]
    mylist[4]
    1 / 0
except (ZeroDivisionError, IndexError) as e:
    print('error')
finally:
    print('douhuiyuxning')
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[包和模块]]></title>
        <id>https://yh0214.github.io/post/os</id>
        <link href="https://yh0214.github.io/post/os">
        </link>
        <updated>2019-10-21T01:21:51.000Z</updated>
        <content type="html"><![CDATA[<p>模块是Python程序架构的一个核心概念<br>
以py为后缀名的文件就是模块，含有__init__.py的目录叫做包<br>
智能导入：alt + enter<br>
导入方式：<br>
1、import + 模块名，使用这种方式调用函数时必须用import后面的所有部分.函数来调用<br>
2、import + 模块名 as 别名<br>
3、from 包.模块名 import 函数名<br>
4、from 包 import 模块名<br>
5、from 包 import 模块名 as 别名<br>
6、from ... import * 引入所有的方法，尽量不使用此方法<br>
别名的使用场景：<br>
1、名字比较长 2、导入的名字和在这个文件当中存在同名的情况<br>
包 --&gt; 模块 --&gt; 函数（类），变量<br>
包是表示存储python代码的文件夹，在以前的python版本中package中有__init__.py才被认为是包，在新版本的python中package中没有__init__.py也被认为是包<br>
模块的搜索顺序<br>
在导入模块时：</p>
<ul>
<li>搜索当前目录指定模块的文件，如果有就直接导入</li>
<li>如果没有，再搜索系统目录</li>
<li>将某个路径添加到系统系统下：sys.path.append('C:\class_09_modules')</li>
<li>每一个模块都有一个内置属性__file__ 可以查看模块的完整路径<br>
__name__属性</li>
<li>测试模块的代码只在测试情况下被运行，而在导入时不会被执行</li>
<li>__name__是一个内置属性</li>
<li>如果被其他文件导入的，__name__就是模块名</li>
<li>如果是当前执行的程序，<strong>name__是__main</strong></li>
</ul>
<p><strong>main__是程序入口，运行的哪一个文件，那么那一个文件就叫__main</strong><br>
if <strong>name</strong> == '<strong>main</strong>':  用来测试模块</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[面向对象基础]]></title>
        <id>https://yh0214.github.io/post/mian-xiang-dui-xiang-ji-chu</id>
        <link href="https://yh0214.github.io/post/mian-xiang-dui-xiang-ji-chu">
        </link>
        <updated>2019-10-16T01:07:30.000Z</updated>
        <content type="html"><![CDATA[<p>面向对象（OOP）是一种编程范式<br>
范式可以认为是一组方法论<br>
编程范式就是一组如何组织代码的方法论<br>
OOP的世界观：<br>
世界是由对象组成的<br>
对象具有运动规律和内部状态<br>
对象之间可以相互作用<br>
OOP的特征：<br>
封装<br>
继承<br>
多态<br>
类的定义</p>
<pre><code>class Door:
    def __init__(self,number,status):
        self.number = number
        self.status = status

door = Door(10001,'closed')
</code></pre>
<pre><code>In[]：door.number
Out[]：10001
</code></pre>
<p>看一下self</p>
<pre><code>class D:
    def __init__(self):
        print(id(self))
</code></pre>
<pre><code>In[]：d = D()
Out[]：101570264
</code></pre>
<pre><code>In[]：id(d)
Out[]：101570264
</code></pre>
<p>这个self就是d，而且是先有的self<br>
__init__函数并不是来生成对象的，只是来初始化类<br>
类中定义方法及调用</p>
<pre><code>class Door:
    def __init__(self,number,status):
        self.number = number
        self.status = status
    
    def open(self):
        self.status = &quot;opening&quot;

    def close(self):
        self.status = &quot;closed&quot;
</code></pre>
<pre><code>door = Door(10001,'closed')
</code></pre>
<pre><code>In[]：door.status
Out[]：'closed'
</code></pre>
<pre><code>door.open()
</code></pre>
<pre><code>In[]：door.status
Out[]：'opening'
</code></pre>
<pre><code>door.close()
</code></pre>
<pre><code>In[]：door.status
Out[]：'closed'
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[带参数的装饰器]]></title>
        <id>https://yh0214.github.io/post/dai-can-shu-de-zhuang-shi-qi</id>
        <link href="https://yh0214.github.io/post/dai-can-shu-de-zhuang-shi-qi">
        </link>
        <updated>2019-10-12T05:57:56.000Z</updated>
        <content type="html"><![CDATA[<p>首先看一下装饰器的副作用</p>
<pre><code>import datetime
def logger(fn):
    def wrap(*args,**kwargs):
        start = datetime.datetime.now()
        ret = fn(*args,**kwargs)
        end = datetime.datetime.now()
        print('{} called took {}'.format(fn.__name__,end-start))
        return ret
    return wrap
</code></pre>
<pre><code>import time
@logger
def sleep(x):
    time.sleep(x)
</code></pre>
<p>使用装饰器定义一个sleep函数，查看它的'<strong>name</strong>'</p>
<pre><code>In[]:sleep.__name__
Out[]:'wrap'
</code></pre>
<p>是wrap而不是sleep，这就是使用了装饰器后的副作用<br>
如何解决？<br>
首先可以使用赋值</p>
<pre><code>import datetime
def logger(fn):
    def wrap(*args,**kwargs):
        start = datetime.datetime.now()
        ret = fn(*args,**kwargs)
        end = datetime.datetime.now()
        print('{} called took {}'.format(fn.__name__,end-start))
        return ret
    wrap.__name__ = fn.__name__
    wrap.__doc__ = fn.__doc__
    return wrap
</code></pre>
<pre><code>import time
@logger
def sleep(x):
    time.sleep(x)
</code></pre>
<pre><code>In[]:sleep.__name__
Out[]:'sleep'
</code></pre>
<p>其次也可以写一个函数</p>
<pre><code>def copy_properties(src,dst):
    dst.__name__ = src.__name__
    dst.__doc__ = src.__doc__
</code></pre>
<pre><code>import datetime

def logger(fn):
    def wrap(*args,**kwargs):
        start = datetime.datetime.now()
        ret = fn(*args,**kwargs)
        end = datetime.datetime.now()
        print('{} called took {}'.format(fn.__name__,end-start))
        return ret
    copy_properties(fn,wrap)
    return wrap
</code></pre>
<p>柯里化</p>
<pre><code>def copy_properties(src):
    def _copy(dst):
        dst.__name__ = src.__name__
        dst.__doc__ = src.__doc__
        return dst
    return _copy
</code></pre>
<p>copy_properties返回的是一个装饰器，可以这么来写</p>
<pre><code>import datetime

def logger(fn):
    @copy_properties(fn)
    def wrap(*args,**kwargs):
        start = datetime.datetime.now()
        ret = fn(*args,**kwargs)
        end = datetime.datetime.now()
        print('{} called took {}'.format(fn.__name__,end-start))
        return ret
    return wrap
</code></pre>
<p>再看下sleep.<strong>name</strong></p>
<pre><code>In[]:sleep.__name__
Out[]:'sleep'
</code></pre>
<p>functools</p>
<pre><code>help(functools.wraps)
Help on function wraps in module functools:

wraps(wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))
    Decorator factory to apply update_wrapper() to a wrapper function
    
    Returns a decorator that invokes update_wrapper() with the decorated
    function as the wrapper argument and the arguments to wraps() as the
    remaining arguments. Default arguments are as for update_wrapper().
    This is a convenience function to simplify applying partial() to
    update_wrapper().
</code></pre>
<p>看看如何使用</p>
<pre><code>import datetime
import functools
def logger(fn):
    @functools.wraps(fn)
    def wrap(*args,**kwargs):
        start = datetime.datetime.now()
        ret = fn(*args,**kwargs)
        end = datetime.datetime.now()
        print('{} called took {}'.format(fn.__name__,end - start))
        return ret
    return wrap
</code></pre>
<pre><code>import time
@logger
def sleep(x):
    time.sleep(x)
</code></pre>
<pre><code>In[]:sleep(3)
Out[]:sleep called took 0:00:03.000353
</code></pre>
<p>这个就是copy_properties的由来<br>
柯里化其实是一个数学的概念，目的是让多个参数变成单个参数<br>
带参数的装饰器<br>
假如需要记录大于某个时间的操作，并且可以对这个时间做控制，通过参数传递进来</p>
<pre><code>import functools
import datetime
def logger(s):
    def _logger(fn):
        @functools.wraps(fn)
        def wrap(*args,**kwargs):
            start = datetime.datetime.now()
            ret = fn(*args,**kwargs)
            end = datetime.datetime.now()
            if (end - start).total_seconds() &gt; s:
                print('call {} took {}'.format(fn.__name__,end - start))
            return ret
        return wrap
    return _logger
</code></pre>
<p>(end - start).total_seconds()将时间格式的时间差转为数字格式</p>
<pre><code>import time
@logger(1)
def sleep(x):
    time.sleep(x)
</code></pre>
<p>执行时间大于1s的操作进行记录</p>
<pre><code>In[]:sleep(2)
Out[]:call sleep took 0:00:02
</code></pre>
<pre><code>In[]:sleep(1)
Out[]:
</code></pre>
<pre><code>In[]:sleep(3)
Out[]:call sleep took 0:00:03
</code></pre>
<p>sleep(2)和sleep(3)执行完后进行了记录，sleep(1)执行完没有进行记录<br>
@logger(1)拆开就是logger(1)(sleep)<br>
带参数的装饰器：一个函数，返回一个不带参数的装饰器<br>
多参数</p>
<pre><code>import functools
import datetime
def logger(s,p = lambda name,t : print('call {} took {} '.format(name,t))):
    def _logger(fn):
        @functools.wraps(fn)
        def wrap(*args,**kwargs):
            start = datetime.datetime.now()
            ret = fn(*args,**kwargs)
            end = datetime.datetime.now()
            if (end - start).total_seconds() &gt; s:
                p(fn.__name__,end - start)
            return ret
        return wrap
    return _logger
</code></pre>
<pre><code>import time
@logger(1)
def sleep(x):
    time.sleep(x)
</code></pre>
<pre><code>In[]：sleep(2)
Out[]：call sleep took 0:00:02 
</code></pre>
<pre><code>import time
@logger(1,p = lambda name,t : print('hahahaha'))
def sleep(x):
    time.sleep(x)
</code></pre>
<pre><code>In[]：sleep(2)
Out[]：hahahaha
</code></pre>
<p>超时后的打印逻辑可以进行自定义了<br>
作为装饰器，可以有多层，但是超过两层时首先要命名一个变量，然后再使用@变量()就可以了<br>
例如有logger _logger __logger三层时</p>
<pre><code>import functools
import datetime
def logger(s):
    def _logger(p = lambda name,t : print('call {} took {} '.format(name,t))):
        def __logger(fn):
            @functools.wraps(fn)
            def wrap(*args,**kwargs):
                start = datetime.datetime.now()
                ret = fn(*args,**kwargs)
                end = datetime.datetime.now()
                if (end - start).total_seconds() &gt; s:
                    p(fn.__name__,end - start)
                return ret
            return wrap
        return __logger
    return _logger
</code></pre>
<pre><code>import time
logger2s = logger(1)
@logger2s()
def sleep(x):
    time.sleep(x)
</code></pre>
<pre><code>In[]:sleep(3)
Out[]:call sleep took 0:00:03 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[装饰器]]></title>
        <id>https://yh0214.github.io/post/zhuang-shi-qi</id>
        <link href="https://yh0214.github.io/post/zhuang-shi-qi">
        </link>
        <updated>2019-10-10T05:48:00.000Z</updated>
        <content type="html"><![CDATA[<p>先来看一个函数，logger</p>
<pre><code>def logger(fn):
    def warp(*args,**kwargs):
        print('call {}'.format(fn.__name__))
        ret = fn(*args,**kwargs)
        print('{} called'.format(fn.__name__))
        return ret
    return warp
</code></pre>
<p>这个函数的参数是函数，返回值也是一个函数<br>
先定义一个加函数，作为参数传入logger</p>
<pre><code>def add(x,y):
    return x + y
</code></pre>
<p>然后定义一个函数</p>
<pre><code>In[]：
loged_add = logger(add)
loged_add(3,5)
Out[]：
call add
add called
8
</code></pre>
<p>loged_add = logger(add)这一步是把add函数作为参数传入logger中，这个时候没有发生任何计算，loged_add是一个函数，这个函数就是wrap<br>
可以查看下loged_add</p>
<pre><code>In[]：loged_add
Out[]：&lt;function __main__.logger.&lt;locals&gt;.warp(*args, **kwargs)&gt;
</code></pre>
<p>以上这种场景通常用于作为参数的函数执行前后需要一些额外操作<br>
再引入一个东西</p>
<pre><code>import datetime

def logger(fn):
    def wrap(*args,**kwargs):
        start = datetime.datetime.now()
        ret = fn(*args,**kwargs)
        end = datetime.datetime.now()
        print('{} called took {}'.format(fn.__name__,end-start))
        return ret
    return wrap
</code></pre>
<p>可以看看这个函数执行了多久</p>
<pre><code>import time

def sleep(x):
    time.sleep(x)
</code></pre>
<pre><code>In[]：loged_sleep = logger(sleep)
</code></pre>
<pre><code>In[]：loged_sleep(3)
Out[]：sleep called took 0:00:03
</code></pre>
<p>装饰器<br>
换一种语法糖</p>
<pre><code>@logger
def sleep(x):
    time.sleep(x)
</code></pre>
<p>这时候，就可以将封装发生在函数定义的时候<br>
这是python的一种语法，可以更方便的去定义我们的函数<br>
@logger的方式和loged_add = logger(add)是等效的<br>
参数是一个函数，返回值是一个函数的函数，就可以作为装饰器<br>
只有用@语法来写的时候，才称为装饰器。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[高阶函数]]></title>
        <id>https://yh0214.github.io/post/gao-jie-han-shu</id>
        <link href="https://yh0214.github.io/post/gao-jie-han-shu">
        </link>
        <updated>2019-10-09T03:30:56.000Z</updated>
        <content type="html"><![CDATA[<p>首先看一个函数</p>
<pre><code>def counter(base):
    def inc(x=1):
        nonlocal base
        base += x
        return base
    return inc
</code></pre>
<pre><code>In[]：inc = counter(3)
In[]：inc(3)
Out[]：6
</code></pre>
<pre><code>In[]：inc(3)
Out[]：9
</code></pre>
<p>这种返回值是一个函数或者参数是函数的情况，就称为高阶函数<br>
第一种情况：返回值是函数<br>
第二种情况：参数是函数<br>
这两种情况的函数，就叫做高阶函数<br>
高阶函数的作用<br>
首先看一个排序函数，传入一个可迭代对象</p>
<pre><code>def sort(it):
    ret = []
    for x in it:
        for i,e in enumerate(ret):
            if x &gt; e:
                ret.insert(i,x)
                break
        else:
            ret.append(x)
    return ret
</code></pre>
<pre><code>In[]：sort([1,4,3,8,2,9,0,7])
Out[]：[9, 8, 7, 4, 3, 2, 1, 0]
</code></pre>
<p>如果要从小到大排列，只需要将大于改成小于就好了，x&lt;e<br>
一般要实现顺序排列和逆序排列需要两个函数，但是可以通过加一个判断，将两个功能通过一个函数实现</p>
<pre><code>def sort(it,r=False):
    ret = []
    for x in it:
        for i,e in enumerate(ret):
            if r:
                if x &lt; e:
                    ret.insert(i,x)
                    break
            else:
                if x &gt; e:
                    ret.insert(i,x)
                    break
        else:
            ret.append(x)
    return ret
</code></pre>
<p>还可以再次进行优化，将if判断抽出来，作为一个函数</p>
<pre><code>def sort(it,r=False):
    def cmp(a,b):
        if r:
            return a &lt; b
        else:
            return a &gt; b
    ret = []
    for x in it:
        for i,e in enumerate(ret):
            if cmp(x,e):
                ret.insert(i,x)
                break
        else:
            ret.append(x)
    return ret
</code></pre>
<p>那将cmp函数移到外面行不行呢？可以将cmp作为一个参数传入</p>
<pre><code>def sort(it,cmp=lambda a,b :a &lt; b):
    ret = []
    for x in it:
        for i,e in enumerate(ret):
            if cmp(x,e):
                ret.insert(i,x)
                break        
        else:
            ret.append(x)
    return ret
</code></pre>
<pre><code>In[]：sort([1,4,3,8,2,9,0,7],lambda a,b :a &gt; b)
Out[]：[9, 8, 7, 4, 3, 2, 1, 0]

</code></pre>
<pre><code>In[]：sort([1,4,3,8,2,9,0,7],lambda a,b :a &lt; b)
Out[]：[0, 1, 2, 3, 4, 7, 8, 9]
</code></pre>
<p>函数作为返回值：通常是用于闭包的场景，需要封装一些变量<br>
函数作为参数：通常是用于大多数逻辑固定，少部分逻辑不固定的场景</p>
]]></content>
    </entry>
</feed>